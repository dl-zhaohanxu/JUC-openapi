openapi: 3.0.3
info:
  title: Contract REST API
  version: '1.0'
  description: japan used car contract API
  contact:
    url: 'https://kinto.jp'
    email: kinto@kint.jp
    name: kinto
  license:
    name: Kinto
    url: 'https://kinto.jp'
servers:
  - url: 'http://127.0.0.1:8090/contract'
    description: Local development env
    variables:
      basePath:
        default: contract
paths:
  '/v1/user/contracts/{contractId}/dealers':
    post:
      summary: Contract Dealer Update Apply API
      operationId: dealerChange
      responses:
        '200':
          description: OK
      description: 販売店変更申請
      parameters: []
      tags:
        - UserContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./schemas/contract/user/DealerChangeCommand.yaml
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
        description: 契約ID
  '/v1/admin/contracts/{contractId}/dealers/{dealerChangeRequestId}':
    put:
      summary: Contract Dealer Update Apply API
      operationId: updateDealerStatus
      responses:
        '200':
          description: OK
      description: 販売店変更承認
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./schemas/contract/admin/UpdateDealerStatusCommand.yaml
      tags:
        - AdminContract
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
        description: 契約ID
      - schema:
          type: integer
        name: dealerChangeRequestId
        in: path
        required: true
        description: 販売店変更申請ID
  '/v1/user/contracts/{contractId}/payments':
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        description: ' 契約ID'
        required: true
    get:
      summary: ''
      operationId: getContractPaymentDetail
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./schemas/contract/user/ContractPaymentDetailResource.yaml
      description: 契約支払詳細
      tags:
        - UserContract
  '/v1/user/contracts/{contractId}':
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
    get:
      summary: Contract Detail API
      operationId: getContractDetail
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./schemas/contract/user/ContractDetailResource.yaml
      description: 契約詳細
      tags:
        - UserContract
      parameters: []
  /v1/user/contracts:
    get:
      summary: Contract Search API
      tags:
        - UserContract
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./schemas/contract/user/ContractListResource.yaml
      operationId: findContracts
      description: 契約検索
      parameters: []
    post:
      summary: ''
      operationId: insertContract
      responses:
        '200':
          description: OK
      description: 契約申込
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./schemas/contract/user/InsertContractCommand.yaml
      tags:
        - UserContract
  '/v1/user/contracts/{contractId}/maintenances':
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
        description: 契約ID
    get:
      summary: Contract Maintenance Detail API
      tags:
        - UserContract
      operationId: getMaintenance
      description: メンテナンス詳細
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./schemas/contract/user/MaintenanceListResource.yaml
  '/v1/user/contracts/{contractId}/confirm':
    put:
      summary: ''
      operationId: updateStartUsing
      responses:
        '200':
          description: OK
      tags:
        - UserContract
      description: 契約更新(利用開始)
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
        description: 契約ID
  '/v1/admin/contracts/{contractId}':
    parameters:
      - schema:
          type: integer
        name: contractId
        in: path
        required: true
        description: 契約ID
    put:
      summary: ''
      operationId: updateContract
      responses:
        '200':
          description: OK
      description: 契約更新APIです。
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./schemas/contract/admin/UpdateContractCommand.yaml
      tags:
        - AdminContract
components:
  schemas: {}
  parameters:
    Content-Type:
      name: Content-Type
      in: header
      required: false
      schema:
        type: string
        default: application/json; charset=UTF-8
      description: HTTPコンテンツ・タイプ
tags:
  - name: AdminContract
  - name: UserContract
